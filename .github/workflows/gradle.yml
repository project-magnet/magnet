name: Java CI with Gradle

on:
  push:
    branches: [ "dev_BE" ]
  pull_request:
    branches: [ "dev_BE" ]
    
permissions:
      contents: read

jobs:
  deploy: 
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
          token: ${{ secrets.ACTION_TOKEN }}
          submodules: true
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # - name: Gradle 캐싱
    #   uses: actions/cache@v3
    #   with:
    #     path: |
    #       ~/.gradle/caches
    #       ~/.gradle/wrapper
    #     key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
    #     restore-keys: |
    #       ${{ runner.os }}-gradle-

    - name: Gradle Grant 권한 부여
      run: chmod +x gradlew
    
    # Spring Boot 어플리케이션 Build
    # - name: Spring Boot Build
    #   run: ./gradlew clean build --exclude-task test
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    - name: Build with Gradle Wrapper
      run: ./gradlew clean build -x test
    
    # Docker 이미지 Build
    - name: docker image build
      run: docker build -t 11dy/magnet-be .
    
    # DockerHub Login
    - name: docker login 
      uses: docker/login-action@v2
      with: 
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # Docker Hub push
    - name: docker Hub push
      run: docker push 11dy/magnet-be

    # GET GitHub IP
    - name: get GitHub IP 
      id: ip
      uses: haythem/public-ip@v1.2
      
    # Configure AWS Credentials - AWS 접근 권한 취득(IAM)
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with: 
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2
    
    # Add github ip to AWS
    - name: Add GitHub IP to AWS
      run: |
        aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
    
    # AWS EC2 Server Connect & Docker 명령어 실행
    - name: AWS EC2 Connection
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PEM }}
        port: ${{ secrets.EC2_SSH_PORT }}
        timeout: 60s
        script: |
          sudo docker stop magnet-be
          sudo docker rm magnet-be
          sudo docker rmi 11dy/magnet-be:latest
          sudo docker run -d -p 8080:8080 \
              --name magnet-be \
              -e CLIENT_ID=${{ secrets.CLIENT_ID }} \
              -e CLIENT_SECRET=${{ secrets.CLIENT_SECRET }} \
              -e DB_NAME=${{ secrets.DB_NAME }} \
              -e JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
              -e MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }} \
              -e MYSQL_USER=${{ secrets.MYSQL_USER }} \
              -e TOSS_CLIENT=${{ secrets.TOSS_CLIENT }} \
              -e TOSS_SECRET=${{ secrets.TOSS_SECRET }} \
              -e LOCAL_IP=${{ secrets.LOCAL_IP }} \
              -e PORT_NUMBER=${{ secrets.PORT_NUMBER }} \
              11dy/magnet-be
              
    # REMOVE Github IP FROM security group
    - name: Remove IP FROM security group
      run: |
        aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
